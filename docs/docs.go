// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/animals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of animals for a specific farm",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "animals"
                ],
                "summary": "Get animals by farm ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID",
                        "name": "farm_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Animal"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid farm ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Modify details of an existing animal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "animals"
                ],
                "summary": "Update an animal",
                "parameters": [
                    {
                        "description": "Updated animal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateAnimalReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateAnimalResp"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new animal to a farm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "animals"
                ],
                "summary": "Create a new animal",
                "parameters": [
                    {
                        "description": "Animal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateAnimalReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateAnimalResp"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/animals/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve details of an animal using its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "animals"
                ],
                "summary": "Get an animal by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Animal ID(UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Animal"
                        }
                    },
                    "400": {
                        "description": "Invalid animal ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Animal not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove an animal from the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "animals"
                ],
                "summary": "Delete an animal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Animal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Animal deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user using their email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login response with token and user ID",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input format or missing fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User sign-up",
                "parameters": [
                    {
                        "description": "Sign-up details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "409": {
                        "description": "Email exist",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/farms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all existing farms.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "farms"
                ],
                "summary": "Get all farms",
                "responses": {
                    "200": {
                        "description": "List of farms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Farm"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create Farm for owner.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "farms"
                ],
                "summary": "Create Farm",
                "parameters": [
                    {
                        "description": "Request body for creating a farm",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateFarmRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateFarmResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/farms/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve farm details by their UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "farms"
                ],
                "summary": "Get a farm by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Farm details",
                        "schema": {
                            "$ref": "#/definitions/models.Farm"
                        }
                    },
                    "400": {
                        "description": "Invalid farm ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Farm not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of a farm by their UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "farms"
                ],
                "summary": "Update a farm",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Farm update payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFarmRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Farm updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFarmResp"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a farm by their UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "farms"
                ],
                "summary": "Delete a farm",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Farm deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResp"
                        }
                    },
                    "400": {
                        "description": "Invalid Farm ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/foods": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing food item in the warehouse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "Update a food item in the warehouse",
                "parameters": [
                    {
                        "description": "Warehouse Food",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFoodReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateFoodResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new food item and associate it with a specific farm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "Create a food item and add it to the warehouse",
                "parameters": [
                    {
                        "description": "Warehouse Food",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddFoodReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.AddFoodResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/foods/food/{food_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve details of a food using its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "Get a food by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Food ID(UUID)",
                        "name": "food_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Invalid food ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Food not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/foods/{farm_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all foods associated with a specific farm",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "Get all food items for a specific farm",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID",
                        "name": "farm_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Food"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/foods/{food_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a food item from the warehouse",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "Remove a food item from the warehouse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Food ID",
                        "name": "food_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/medicines": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all medicines for a specific farm",
                "tags": [
                    "medicines"
                ],
                "summary": "Get all medicines",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID",
                        "name": "farm_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Medicine"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new medicine to the farm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Create a new medicine",
                "parameters": [
                    {
                        "description": "Medicine Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MedicineReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.MedicineResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/medicines/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific medicine by its ID",
                "tags": [
                    "medicines"
                ],
                "summary": "Get a medicine by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medicine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Medicine"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of a specific medicine",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "medicines"
                ],
                "summary": "Update an existing medicine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medicine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Medicine Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MedicineReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MedicineResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a specific medicine by its ID",
                "tags": [
                    "medicines"
                ],
                "summary": "Delete a medicine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Medicine ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all registered users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve user details by their UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of a user by their UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update payload, provide password only if it is updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserSwag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserResp"
                        }
                    },
                    "400": {
                        "description": "Invalid input or user ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user by their UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResp"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AddFoodReq": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "farm_id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                }
            }
        },
        "models.AddFoodResp": {
            "type": "object",
            "properties": {
                "food": {
                    "$ref": "#/definitions/models.FoodWithoutTime"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Animal": {
            "type": "object",
            "required": [
                "farm_id",
                "type",
                "weight"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "health_status": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_fed": {
                    "type": "string"
                },
                "last_watered": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.AnimalWithoutTime": {
            "type": "object",
            "required": [
                "farm_id",
                "type",
                "weight"
            ],
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "health_status": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.CreateAnimalReq": {
            "type": "object",
            "required": [
                "farm_id",
                "type",
                "weight"
            ],
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "health_status": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.CreateAnimalResp": {
            "type": "object",
            "properties": {
                "animal": {
                    "$ref": "#/definitions/models.AnimalWithoutTime"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CreateFarmRequest": {
            "type": "object",
            "required": [
                "location",
                "name",
                "owner_id"
            ],
            "properties": {
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "models.CreateFarmResponse": {
            "type": "object",
            "properties": {
                "farm": {
                    "$ref": "#/definitions/models.Farm"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ErrResp": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Farm": {
            "type": "object",
            "required": [
                "location",
                "name",
                "owner_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "models.Food": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.FoodWithoutTime": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Medicine": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.MedicineReq": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "farm_id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                }
            }
        },
        "models.MedicineResp": {
            "type": "object",
            "properties": {
                "medicine": {
                    "$ref": "#/definitions/models.MedicineWithoutTime"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.MedicineWithoutTime": {
            "type": "object",
            "required": [
                "farm_id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                }
            }
        },
        "models.MessageResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "phone_number": {
                    "type": "string",
                    "minLength": 9
                }
            }
        },
        "models.SignUpResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UpdateAnimalReq": {
            "type": "object",
            "required": [
                "health_status",
                "id",
                "last_fed",
                "last_watered",
                "type",
                "weight"
            ],
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "health_status": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_fed": {
                    "type": "string"
                },
                "last_watered": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "models.UpdateAnimalResp": {
            "type": "object",
            "properties": {
                "animal": {
                    "$ref": "#/definitions/models.UpdateAnimalReq"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateFarmRequest": {
            "type": "object",
            "required": [
                "id",
                "location",
                "name",
                "owner_id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "models.UpdateFarmResp": {
            "type": "object",
            "properties": {
                "farm": {
                    "$ref": "#/definitions/models.UpdateFarmRequest"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateFoodReq": {
            "type": "object",
            "required": [
                "farm_id",
                "id",
                "min_threshold",
                "name",
                "quantity",
                "suitable_for",
                "unit_of_measure"
            ],
            "properties": {
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "min_threshold": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "suitable_for": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_of_measure": {
                    "type": "string"
                }
            }
        },
        "models.UpdateFoodResp": {
            "type": "object",
            "properties": {
                "food": {
                    "$ref": "#/definitions/models.UpdateFoodReq"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUser": {
            "type": "object",
            "required": [
                "email",
                "name",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "minLength": 9
                }
            }
        },
        "models.UpdateUserResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.UpdateUser"
                }
            }
        },
        "models.UpdateUserSwag": {
            "type": "object",
            "required": [
                "email",
                "name",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "minLength": 9
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone_number"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "phone_number": {
                    "type": "string",
                    "minLength": 9
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Farmish API",
	Description:      "Testing Swagger APIs.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
